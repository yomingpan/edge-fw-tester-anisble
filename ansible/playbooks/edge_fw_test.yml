---
- name: Edge Firewall Connectivity Test
  hosts: all
  gather_facts: no
  vars:
    tester_dir: /tmp/edge_fw_tester
  tasks:
    - name: Ensure tester directory exists
      file: path="{{ tester_dir }}" state=directory mode=0755

    - name: Copy edge_fw_tester package
      copy:
        src: "{{ playbook_dir }}/../../src/edge_fw_tester/"
        dest: "{{ tester_dir }}/edge_fw_tester/"
        mode: 0755

    - name: Copy scripts and configs
      copy:
        src: "{{ item.src }}"
        dest: "{{ tester_dir }}/{{ item.dest }}"
        mode: 0755
      loop:
        - { src: "{{ playbook_dir }}/../../scripts/run_tests.py", dest: "run_tests.py" }
        - { src: "{{ playbook_dir }}/../../config/targets.yaml", dest: "targets.yaml" }
        - { src: "{{ playbook_dir }}/../../config/test.yaml", dest: "test.yaml" }
        - { src: "{{ playbook_dir }}/../../requirements.txt", dest: "requirements.txt" }

    - name: Install dependencies (pip)
      pip:
        requirements: "{{ tester_dir }}/requirements.txt"
        virtualenv: "{{ tester_dir }}/venv"

    - name: Run tests
      command: "{{ tester_dir }}/venv/bin/python {{ tester_dir }}/run_tests.py --config {{ tester_dir }}/test.yaml"
      environment:
        PYTHONPATH: "{{ tester_dir }}"
      register: result
      ignore_errors: yes

    - name: Extract JSON result
      set_fact:
        edge_result_json: "{{ (result.stdout.split('--JSON-START--')[1].split('--JSON-END--')[0]).strip() | from_json }}"
      when: "'--JSON-START--' in result.stdout"

    - name: Show raw result
      debug:
        var: result.stdout_lines

    - name: Set fact for aggregation
      set_fact:
        edge_result: "{{ result.stdout }}"

  # Aggregate results on control node
- name: Aggregate edge results
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure aggregated_results is defined
      set_fact:
        aggregated_results: []

    - name: Collect host results
      set_fact:
        aggregated_results: "{{ aggregated_results | default([]) + [ { 'host': item.key, 'results': item.value.edge_result_json } ] }}"
      loop: "{{ hostvars | dict2items }}"
      when: item.value.edge_result_json is defined

    - name: Display aggregated results
      debug:
        var: aggregated_results

    - name: Publish aggregated results to AWX
      set_stats:
        data:
          edge_test_results: "{{ aggregated_results }}"
        aggregate: yes

    - name: Flatten all edge results
      set_fact:
        all_edge_results: >-
          {{
            aggregated_results | map(attribute='results') | sum(start=[]) | map('combine', {'edge': item.host}) | list
          }}
      loop: "{{ aggregated_results }}"
      loop_control:
        label: "{{ item.host }}"

    - name: Group edge results by edge
      set_fact:
        edge_grouped_results: "{{ all_edge_results | groupby('edge') }}"

    - name: Summarize edge results
      vars:
        success_status: ['OPEN', 'REACHABLE']
      set_fact:
        edge_summary: "{{ edge_summary | default([]) + [ { 'edge': item.0, 'total': item.1 | length, 'success': (item.1 | selectattr('status', 'in', success_status) | list | length), 'fail': (item.1 | rejectattr('status', 'in', success_status) | list | length) } ] }}"
      loop: "{{ edge_grouped_results }}"

    - name: Show edge summary
      debug:
        msg: >-
          {{ item.edge }}: {{ item.success }}/{{ item.total }} success, success rate {{ (item.success / (item.total | float) * 100) | round(1) if item.total > 0 else 0 }}%
      loop: "{{ edge_summary }}"
